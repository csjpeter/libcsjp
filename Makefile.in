
# We dont want to use built in rules. Those are ineffective and we
# can never know all of them, thus those can be unexpected as well.

.SUFFIXES:

MAKEFLAGS += --no-builtin-rules --no-builtin-variables
EMPTY=
COMMA=,
SPACE=$(EMPTY) $(EMPTY)
SHELL=bash

#
#	Configuration part
#

CFLAGS=@CFLAGS@
LDFLAGS=@LDFLAGS@
LIBS=@LIBS@
STATICS=@STATICS@
INCLUDES=@INCLUDES@
CC=@CC@
CXX=@CXX@
CPP=@CPP@
LD=@LD@
STRIP=@STRIP@
OBJCOPY=@OBJCOPY@
MOC=@MOC@
RANLIB=@RANLIB@
PKGCONFIG=@PKGCONFIG@

#
# some tool
#

#cpp -dM /dev/null
COMPILE=$(CXX) -c $(CFLAGS) $(INCLUDES)

LINK=$(CXX) $(LDFLAGS) $^ $(STATICS) $(LIBS) -o $@

LINK_DYNAMIC=$(CXX) -shared -Bdynamic $(LDFLAGS) $^ $(LIBS) \
	-Wl,-soname,$(basename $(notdir $@)) -o $@

LINK_STATIC=ar cqs $@ $^

TESTDIR=$(shell echo $$PWD)/tmp/@PRJNAME@@VERSION_API@/test/

tmp/src/core/test/%.opp: src/core/test/%.cpp
	@test -d $(dir $@) || mkdir -p $(dir $@)
	$(COMPILE) -DTESTDIR=\"$(TESTDIR)\" -o $@ $<

tmp/src/container/test/%.opp: src/container/test/%.cpp
	@test -d $(dir $@) || mkdir -p $(dir $@)
	$(COMPILE) -DTESTDIR=\"$(TESTDIR)\" -o $@ $<

tmp/src/human/test/%.opp: src/human/test/%.cpp
	@test -d $(dir $@) || mkdir -p $(dir $@)
	$(COMPILE) -DTESTDIR=\"$(TESTDIR)\" -o $@ $<

tmp/src/system/test/%.opp: src/system/test/%.cpp
	@test -d $(dir $@) || mkdir -p $(dir $@)
	$(COMPILE) -DTESTDIR=\"$(TESTDIR)\" -o $@ $<

tmp/src/%.opp: src/%.cpp
	@test -d $(dir $@) || mkdir -p $(dir $@)
	$(COMPILE) -o $@ $<

@TCROOT@@PREFIX@include/@PRJNAME@@VERSION_API@/%.h: src/%.h
	@test -d $(dir $@) || mkdir -p $(dir $@)
	cp -pd $< $@

@TCROOT@@PREFIX@lib/%: \
		tmp/@TCROOT@@PREFIX@lib/%
	@test -d $(dir $@) || mkdir -p $(dir $@)
	cp $^ $@
	$(STRIP) --remove-section=.comment --remove-section=.note --strip-unneeded $@

@TCROOT@@PREFIX@lib/debug/@PREFIX@lib/%: \
		tmp/@TCROOT@@PREFIX@lib/%
	@test -d $(dir $@) || mkdir -p $(dir $@)
	$(OBJCOPY) --only-keep-debug $^ $@

#$(OBJCOPY) --add-gnu-debuglink=@TCROOT@@PREFIX@lib/debug/@PREFIX@lib/@PRJNAME@.so.@VERSION@ $@

@TCROOT@@PREFIX@bin/% : \
		tmp/@TCROOT@@PREFIX@bin/%
	@test -d $(dir $@) || mkdir -p $(dir $@)
	cp $^ $@
	$(STRIP) --remove-section=.comment --remove-section=.note --strip-debug $@

@TCROOT@@PREFIX@lib/debug/@PREFIX@bin/% : \
		tmp/@TCROOT@@PREFIX@bin/%
	@test -d $(dir $@) || mkdir -p $(dir $@)
	$(OBJCOPY) --only-keep-debug $^ $@

#
# build goals
#

TEST_LIST=\
	  container-array \
	  container-pod_array \
	  container-ref_array \
	  core-string \
	  core-string_chunk \
	  core-file \
	  core-mutex \
	  container-bintree \
	  container-container \
	  container-container_speed \
	  container-sorter_container \
	  container-json
ifneq (,$(findstring multicultural,@CONFIG@))
	TEST_LIST+=\
		   human-unichar \
		   human-text
endif
ifneq (,$(findstring system,@CONFIG@))
	TEST_LIST+=\
		   system-daemon \
		   system-signal \
		   system-socket \
		   system-listener \
		   system-server \
		   system-client \
		   system-epoll
endif

define TEST_template
TEST_BINARIES+=@TCROOT@@PREFIX@bin/test-@PRJNAME@@VERSION_API@-$(1)
TEST_BINARIES_DBG+=\
	@TCROOT@@PREFIX@lib/debug/@PREFIX@bin/test-@PRJNAME@@VERSION_API@-$(1)
TEST_BINARIES_MAN_PAGES=\
	@MAN_DIR@/man1/test-@PRJNAME@@VERSION_API@-$(1).1
endef
$(foreach i,$(TEST_LIST),$(eval $(call TEST_template,$(i))))


.PRECIOUS: \
	tmp/@TCROOT@@PREFIX@bin/test-@PRJNAME@@VERSION_API@-container-container_speed \
	$(foreach i,$(TEST_LIST),\
	tmp/@TCROOT@@PREFIX@bin/test-@PRJNAME@@VERSION_API@-$(i))


DEVEL_HEADERS = $(wildcard @HEADERDIR@/devel/*.h)
DEVEL_INCLUDES=-Isrc/devel

CONTAINER_HEADERS = $(wildcard @HEADERDIR@/container/*.h)
CONTAINER_INCLUDES=-Isrc/container

CORE_HEADERS = $(wildcard @HEADERDIR@/core/*.h)
CORE_INCLUDES=-Isrc/core

ifneq (,$(findstring multicultural,@CONFIG@))
	HUMAN_HEADERS = $(wildcard @HEADERDIR@/human/*.h)
else
	HUMAN_HEADERS=
endif
HUMAN_INCLUDES=-Isrc/human

ifneq (,$(findstring system,@CONFIG@))
	SYSTEM_HEADERS = $(wildcard @HEADERDIR@/system/*.h)
else
	SYSTEM_HEADERS=
endif
SYSTEM_INCLUDES=-Isrc/system

HEADERS=\
	$(DEVEL_HEADERS) \
	$(CONTAINER_HEADERS) \
	$(CORE_HEADERS) \
	$(HUMAN_HEADERS) \
	$(SYSTEM_HEADERS)

#
# temporary files
#

-include $(DEVEL_OBJECTS:.opp=.d)

DEVEL_OBJECTS = $(patsubst src/devel/%.cpp,tmp/src/devel/%.opp,\
		 	$(wildcard src/devel/*.cpp))

-include $(CORE_OBJECTS:.opp=.d)

CORE_OBJECTS = $(patsubst src/core/%.cpp,tmp/src/core/%.opp,\
		 	$(wildcard src/core/*.cpp))

-include $(CONTAINER_OBJECTS:.opp=.d)

CONTAINER_OBJECTS = $(patsubst src/container/%.cpp,tmp/src/container/%.opp,\
		 	$(wildcard src/container/*.cpp))

-include $(HUMAN_OBJECTS:.opp=.d)

ifneq (,$(findstring multicultural,@CONFIG@))
HUMAN_OBJECTS = $(patsubst src/human/%.cpp,tmp/src/human/%.opp,\
			$(wildcard src/human/*.cpp))
else
HUMAN_OBJECTS=
endif

-include $(SYSTEM_OBJECTS:.opp=.d)

ifneq (,$(findstring system,@CONFIG@))
SYSTEM_OBJECTS = $(patsubst src/system/%.cpp,tmp/src/system/%.opp,\
		 	$(wildcard src/system/*.cpp))
else
SYSTEM_OBJECTS=
endif

#
# main rules
#

all: build

build: build-arch build-indep

build-arch: \
	$(HEADERS) \
	@TCROOT@@PREFIX@lib/@PRJNAME@@VERSION_API@.a \
	@TCROOT@@PREFIX@lib/@PRJNAME@.so.@VERSION@ \
	@TCROOT@@PREFIX@lib/@PRJNAME@.so.@VERSION_API@ \
	@TCROOT@@PREFIX@lib/debug/@PREFIX@lib/@PRJNAME@.so.@VERSION@ \
	@TCROOT@@PREFIX@bin/test-@PRJNAME@@VERSION_API@-container-container_speed \
	@TCROOT@@PREFIX@lib/debug/@PREFIX@bin/test-@PRJNAME@@VERSION_API@-container-container_speed \
	$(TEST_BINARIES) \
	$(TEST_BINARIES_DBG) \
	$(TEST_BINARIES_MAN_PAGES)

build-indep: \
	@TCROOT@@PREFIX@bin/test-@PRJNAME@@VERSION_API@-container-speed.gnuplot \
	@DOCDIR@/containers.png \
	@DOCDIR@/html/index.html

clean:
	test "x" = "x$(shell find . | grep \\~$$)" || rm $(shell find . | grep \\~$$)
	test "x" = "x$(shell find . | grep \\.swp$$)" || rm $(shell find . | grep \\.swp$$)
	test "x" = "x$(shell find . | grep \\.log$$)" || rm $(shell find . | grep \\.log$$)
	! test -d tmp || rm -fr tmp
	! test -d @TCROOT@@PREFIX@bin || rm -fr @TCROOT@@PREFIX@bin
	! test -d @TCROOT@@PREFIX@lib || rm -fr @TCROOT@@PREFIX@lib
	! test -d @TCROOT@@PREFIX@share || rm -fr @TCROOT@@PREFIX@share
	! test -d @TCROOT@@PREFIX@test || rm -fr @TCROOT@@PREFIX@test
	! test -d @TCROOT@@PREFIX@include || rm -fr @TCROOT@@PREFIX@include
	test "x" = "x@TCROOT@@PREFIX@" || { ! test -d @TCROOT@@PREFIX@ || rmdir @TCROOT@@PREFIX@ ; }
	! test -e Makefile || rm Makefile
	! test -e doxyfile || rm doxyfile

install:
	test -d $(DESTDIR) || mkdir -p $(DESTDIR)
	test -d $(DESTDIR)/@PREFIX@ || mkdir -p $(DESTDIR)/@PREFIX@
	cp -pdr @TCROOT@@PREFIX@lib $(DESTDIR)/@PREFIX@lib
	cp -pdr @TCROOT@@PREFIX@share $(DESTDIR)/@PREFIX@share
	cp -pdr @TCROOT@@PREFIX@bin $(DESTDIR)/@PREFIX@bin
	cp -pdr @TCROOT@@PREFIX@include $(DESTDIR)/@PREFIX@include

check: $(TEST_BINARIES)
	@let RET=0; \
	mkdir -p $(TESTDIR); \
	for t in $(TEST_BINARIES); do \
		if [[ x$(TEST) = x ]]; then \
			echo LD_LIBRARY_PATH=@TCROOT@@PREFIX@lib $$t; \
			LD_LIBRARY_PATH=@TCROOT@@PREFIX@lib $$t || let RET=$$?; \
		elif [[ "$$t" =~ ($(TEST)) ]]; then \
			echo LD_LIBRARY_PATH=@TCROOT@@PREFIX@lib $$t; \
			LD_LIBRARY_PATH=@TCROOT@@PREFIX@lib $$t -v || let RET=$$?; \
		fi \
	done; \
	test $$RET -eq 0 || { \
		echo -e "\e[31m"; \
		echo "There was some failure during testing !"; \
		echo -e "\e[0m"; \
		false ; \
	}

@DOCDIR@/html/index.html: $(HEADERS)
	@test -d @DOCDIR@ || mkdir -p @DOCDIR@
	doxygen - < doxyfile

FORCE:

#
#	build rules
#

@TCROOT@@PREFIX@lib/@PRJNAME@@VERSION_API@.a: \
		$(DEVEL_OBJECTS) \
		$(CORE_OBJECTS) \
		$(CONTAINER_OBJECTS) \
		$(TEXT_OBJECTS) \
		$(HUMAN_OBJECTS) \
		$(SYSTEM_OBJECTS)
	test -d $(dir $@) || mkdir -p $(dir $@)
	$(LINK_STATIC)
	$(RANLIB) $@

tmp/@TCROOT@@PREFIX@lib/@PRJNAME@.so.@VERSION@: \
		$(DEVEL_OBJECTS) \
		$(CORE_OBJECTS) \
		$(CONTAINER_OBJECTS) \
		$(TEXT_OBJECTS) \
		$(HUMAN_OBJECTS) \
		$(SYSTEM_OBJECTS)
	@test -d $(dir $@) || mkdir -p $(dir $@)
	$(LINK_DYNAMIC)

@TCROOT@@PREFIX@lib/@PRJNAME@.so.@VERSION_API@ : \
		| @TCROOT@@PREFIX@lib/@PRJNAME@.so.@VERSION@
	ln -s $(notdir @TCROOT@@PREFIX@lib/@PRJNAME@.so.@VERSION@) $@

@TCROOT@@PREFIX@bin/test-@PRJNAME@@VERSION_API@-container-speed.gnuplot: \
		src/container/test/container_speed.gnuplot
	@test -d $(dir $@) || mkdir -p $(dir $@)
	cp $< $@

@TCROOT@@PREFIX@bin/@PRJNAME@@VERSION_API@-%: \
		tmp/src/tools/%.opp \
		@TCROOT@@PREFIX@lib/@PRJNAME@@VERSION_API@.a
	@test -d $(dir $@) || mkdir -p $(dir $@)
	$(LINK)

COMPONENT_LIST = container core human system
define COMPONENT_TEST_template
tmp/@TCROOT@@PREFIX@bin/test-@PRJNAME@@VERSION_API@-$(1)-% : \
		tmp/src/$(1)/test/%.opp \
		@TCROOT@@PREFIX@lib/@PRJNAME@.so.@VERSION_API@
	@test -d $$(dir $$@) || mkdir -p $$(dir $$@)
	$$(LINK)
endef
$(foreach i,$(COMPONENT_LIST),$(eval $(call COMPONENT_TEST_template,$(i))))

@MAN_DIR@/man1/test-@PRJNAME@@VERSION_API@-%.1 :
	@test -d $(dir $@) || mkdir -p $(dir $@)
	echo ".so man1/@PRJNAME@@VERSION_API@-test.1" > $@

@DOCDIR@/%.png : \
		dot/%.dot
	@test -d $(dir $@) || mkdir -p $(dir $@)
	dot -Tpng $^ -o $@

